{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport { pink } from \"../utils/colors\";\nimport TextButton from \"./TextButton\";\nimport styles from \"../utils/styles\";\nimport { ShowAlert } from \"../utils/api\";\n\nvar Deck = function (_Component) {\n  _inherits(Deck, _Component);\n\n  var _super = _createSuper(Deck);\n\n  function Deck() {\n    var _this;\n\n    _classCallCheck(this, Deck);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleQuizGame = function () {\n      var _this$props = _this.props,\n          navigation = _this$props.navigation,\n          title = _this$props.title,\n          cardsCount = _this$props.cardsCount;\n\n      if (cardsCount === 0) {\n        ShowAlert(\"Invalid Deck Input\", \"Please Add cards to this deck\");\n      } else {\n        navigation.navigate('Quiz', {\n          title: title\n        });\n      }\n    };\n\n    _this.handleAddCards = function () {\n      var _this$props2 = _this.props,\n          title = _this$props2.title,\n          navigation = _this$props2.navigation;\n      navigation.navigate('AddNewCard', {\n        title: title\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Deck, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          title = _this$props3.title,\n          cardsCount = _this$props3.cardsCount;\n      return React.createElement(View, {\n        style: styles.Deckcontainer\n      }, React.createElement(View, {\n        style: styles.deckCard\n      }, React.createElement(Text, {\n        style: styles.Deckheader\n      }, title), React.createElement(Text, {\n        style: styles.DecksubHeader\n      }, cardsCount <= 1 ? cardsCount + ' card' : cardsCount + ' cards')), React.createElement(View, null, React.createElement(TextButton, {\n        style: [styles.Deckbutton, {\n          backgroundColor: pink\n        }],\n        onPress: this.handleQuizGame\n      }, \"Start Quiz\"), React.createElement(TextButton, {\n        style: [styles.Deckbutton, {\n          backgroundColor: pink\n        }],\n        onPress: this.handleAddCards\n      }, \"Add New Card\")));\n    }\n  }]);\n\n  return Deck;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(decks, _ref) {\n  var navigation = _ref.navigation;\n  var title = navigation.state.params.title;\n  var cardsCount = decks[title].questions.length;\n  var deck = decks[title];\n  return {\n    deck: deck,\n    title: title,\n    cardsCount: cardsCount\n  };\n};\n\nexport default connect(mapStateToProps)(Deck);","map":{"version":3,"sources":["C:/Users/User/Desktop/test/Mobile-FlashCard-React-Native-main3/components/Deck.js"],"names":["React","Component","connect","pink","TextButton","styles","ShowAlert","Deck","handleQuizGame","props","navigation","title","cardsCount","navigate","handleAddCards","Deckcontainer","deckCard","Deckheader","DecksubHeader","Deckbutton","backgroundColor","mapStateToProps","decks","state","params","questions","length","deck"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT;AACA,OAAOC,UAAP;AACA,OAAOC,MAAP;AACA,SAAQC,SAAR;;IAGMC,I;;;;;;;;;;;;;;;;UAEHC,c,GAAiB,YAAM;AACtB,wBAA0C,MAAKC,KAA/C;AAAA,UAAQC,UAAR,eAAQA,UAAR;AAAA,UAAoBC,KAApB,eAAoBA,KAApB;AAAA,UAA2BC,UAA3B,eAA2BA,UAA3B;;AAEA,UAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpBN,QAAAA,SAAS,CAAC,oBAAD,EACT,+BADS,CAAT;AAED,OAHD,MAGO;AACLI,QAAAA,UAAU,CAACG,QAAX,CAAoB,MAApB,EAA4B;AAAEF,UAAAA,KAAK,EAALA;AAAF,SAA5B;AACD;AACF,K;;UAEDG,c,GAAiB,YAAM;AACrB,yBAA8B,MAAKL,KAAnC;AAAA,UAAQE,KAAR,gBAAQA,KAAR;AAAA,UAAeD,UAAf,gBAAeA,UAAf;AACAA,MAAAA,UAAU,CAACG,QAAX,CAAoB,YAApB,EAAkC;AAAEF,QAAAA,KAAK,EAALA;AAAF,OAAlC;AAED,K;;;;;;;WAED,kBAAS;AACP,yBAA8B,KAAKF,KAAnC;AAAA,UAAQE,KAAR,gBAAQA,KAAR;AAAA,UAAeC,UAAf,gBAAeA,UAAf;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGP,MAAM,CAACU;AAArB,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGV,MAAM,CAACW;AAArB,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGX,MAAM,CAACY;AAArB,SACIN,KADJ,CADF,EAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGN,MAAM,CAACa;AAArB,SACIN,UAAU,IAAI,CAAd,GACEA,UAAU,GAAG,OADf,GAEEA,UAAU,GAAG,QAHnB,CAJF,CADF,EAYE,oBAAC,IAAD,QAEE,oBAAC,UAAD;AACE,QAAA,KAAK,EAAG,CAACP,MAAM,CAACc,UAAR,EAAoB;AAAEC,UAAAA,eAAe,EAAEjB;AAAnB,SAApB,CADV;AAEE,QAAA,OAAO,EAAG,KAAKK;AAFjB,sBAFF,EAOE,oBAAC,UAAD;AACE,QAAA,KAAK,EAAG,CAACH,MAAM,CAACc,UAAR,EAAoB;AAAEC,UAAAA,eAAe,EAAEjB;AAAnB,SAApB,CADV;AAEE,QAAA,OAAO,EAAG,KAAKW;AAFjB,wBAPF,CAZF,CADF;AA4BD;;;;EAlDgBb,S;;AAqDnB,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,QAA2B;AAAA,MAAjBZ,UAAiB,QAAjBA,UAAiB;AACjD,MAAQC,KAAR,GAAkBD,UAAU,CAACa,KAAX,CAAiBC,MAAnC,CAAQb,KAAR;AACA,MAAMC,UAAU,GAAGU,KAAK,CAACX,KAAD,CAAL,CAAac,SAAb,CAAuBC,MAA1C;AACA,MAAMC,IAAI,GAAGL,KAAK,CAACX,KAAD,CAAlB;AACA,SAAO;AACLgB,IAAAA,IAAI,EAAJA,IADK;AAELhB,IAAAA,KAAK,EAALA,KAFK;AAGLC,IAAAA,UAAU,EAAVA;AAHK,GAAP;AAKD,CATD;;AAWA,eAAeV,OAAO,CAACmB,eAAD,CAAP,CAAyBd,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text} from 'react-native'\nimport { connect } from 'react-redux'\nimport { pink } from '../utils/colors'\nimport TextButton from './TextButton'\nimport styles from '../utils/styles'\nimport {ShowAlert} from '../utils/api'\n\n\nclass Deck extends Component {\n   \n   handleQuizGame = () => {\n    const { navigation, title, cardsCount } = this.props\n   // Adding same alert here.\n    if (cardsCount === 0) {\n      ShowAlert(\"Invalid Deck Input\",\n      \"Please Add cards to this deck\");\n    } else {\n      navigation.navigate('Quiz', { title })\n    }\n  }\n\n  handleAddCards = () => {\n    const { title, navigation } = this.props\n    navigation.navigate('AddNewCard', { title })\n  \n  }\n\n  render() {\n    const { title, cardsCount } = this.props\n \n    return (\n      <View style={ styles.Deckcontainer}>\n        <View style= {styles.deckCard }>\n          <Text style={ styles.Deckheader }>\n            { title }\n          </Text>\n          <Text style={ styles.DecksubHeader }>\n            { cardsCount <= 1\n              ? cardsCount + ' card'\n              : cardsCount + ' cards'\n            }\n          </Text>\n        </View>\n        <View>\n       \n          <TextButton\n            style={ [styles.Deckbutton, { backgroundColor: pink }] }\n            onPress={ this.handleQuizGame }>\n              Start Quiz\n          </TextButton>\n          <TextButton\n            style={ [styles.Deckbutton, { backgroundColor: pink }] }\n            onPress={ this.handleAddCards }>\n              Add New Card\n          </TextButton>\n          </View>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (decks, { navigation }) => {\n  const { title } = navigation.state.params\n  const cardsCount = decks[title].questions.length\n  const deck = decks[title];\n  return {\n    deck,\n    title,\n    cardsCount\n  }\n}\n\nexport default connect(mapStateToProps)(Deck)\n"]},"metadata":{},"sourceType":"module"}