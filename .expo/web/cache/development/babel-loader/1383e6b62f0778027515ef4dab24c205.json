{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { connect } from 'react-redux';\nimport styles from \"../utils/styles\";\nimport { addDeck, ShowAlert } from \"../utils/api\";\nimport { addDecks } from \"../actions\";\nimport { white, CyanA100 } from \"../utils/colors\";\n\nvar SubmitButton = function SubmitButton(_ref) {\n  var onPress = _ref.onPress;\n  return React.createElement(TouchableOpacity, {\n    style: Platform.OS === 'ios' ? styles.AddDeckiosSubmitBtn : styles.AddDeckandroidSubmitBtn,\n    onPress: onPress\n  }, React.createElement(Text, {\n    style: styles.AddDecksubmitBtnText\n  }, \"SUBMIT\"));\n};\n\nvar AddDeck = function (_Component) {\n  _inherits(AddDeck, _Component);\n\n  var _super = _createSuper(AddDeck);\n\n  function AddDeck() {\n    var _this;\n\n    _classCallCheck(this, AddDeck);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      title: ''\n    };\n\n    _this.handleChange = function (title) {\n      _this.setState(function () {\n        return {\n          title: title\n        };\n      });\n    };\n\n    _this.submit = function () {\n      var dispatch = _this.props.dispatch;\n      var title = _this.state.title;\n      var key = _this.state.title;\n\n      if (title.length === 0) {\n        ShowAlert(\"Invalid Input\", \"Please enter title for new deck\");\n      } else {\n        var entry = {\n          title: title,\n          questions: []\n        };\n        dispatch(addDecks(_defineProperty({}, key, entry)));\n\n        _this.setState(function () {\n          return {\n            title: ''\n          };\n        });\n\n        _this.moveToDecks(title);\n\n        addDeck({\n          key: key,\n          entry: entry\n        });\n      }\n    };\n\n    _this.moveToDecks = function (title) {\n      var navigation = _this.props.navigation;\n      navigation.navigate('Deck', {\n        title: title\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddDeck, [{\n    key: \"render\",\n    value: function render() {\n      var value = this.state.title;\n      return React.createElement(View, {\n        style: styles.AddDeckcontainer\n      }, React.createElement(Text, {\n        style: styles.AddDeckheader\n      }, \"Create Deck\"), React.createElement(KeyboardAvoidingView, {\n        style: styles.inputContainer,\n        behavior: \"padding\",\n        enabled: true\n      }, React.createElement(View, null, React.createElement(TextInput, {\n        style: styles.AddDeckinput,\n        placeholder: 'Add Deck Title',\n        value: value,\n        onChangeText: this.handleChange\n      }), React.createElement(SubmitButton, {\n        onPress: this.submit,\n        style: (styles.Deckbutton, {\n          marginTop: 100\n        })\n      }))));\n    }\n  }]);\n\n  return AddDeck;\n}(Component);\n\nfunction mapStateToProps(decks) {\n  return {\n    decks: decks\n  };\n}\n\nexport default connect(mapStateToProps)(AddDeck);","map":{"version":3,"sources":["C:/Users/User/Desktop/test/Mobile-FlashCard-React-Native-main3/components/AddDeck.js"],"names":["React","Component","connect","styles","addDeck","ShowAlert","addDecks","white","CyanA100","SubmitButton","onPress","Platform","OS","AddDeckiosSubmitBtn","AddDeckandroidSubmitBtn","AddDecksubmitBtnText","AddDeck","state","title","handleChange","setState","submit","dispatch","props","key","length","entry","questions","moveToDecks","navigation","navigate","value","AddDeckcontainer","AddDeckheader","inputContainer","AddDeckinput","Deckbutton","marginTop","mapStateToProps","decks"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text,Platform, TextInput, KeyboardAvoidingView,\n   TouchableOpacity, Alert } from 'react-native'\nimport { connect } from 'react-redux'\nimport styles from '../utils/styles'\nimport { addDeck, ShowAlert } from '../utils/api'\nimport { addDecks } from '../actions'\nimport { white, CyanA100 } from '../utils/colors'\n\n\nconst SubmitButton = ({ onPress }) => {\n  return (\n    <TouchableOpacity\n      style={ Platform.OS === 'ios' ? styles.AddDeckiosSubmitBtn : styles.AddDeckandroidSubmitBtn }\n      onPress={ onPress }>\n        <Text style={ styles.AddDecksubmitBtnText }>SUBMIT</Text>\n    </TouchableOpacity>\n  )\n}\n\nclass AddDeck extends Component {\n  state = {\n    title: ''\n  }\n\n  handleChange = (title) => {\n    this.setState(() => ({ title }))\n  }\n\n  submit = () => {\n    const { dispatch } = this.props\n    const { title } = this.state\n    const key = this.state.title\n// Adding same alert to test it on web.\n    if (title.length === 0) {\n      ShowAlert(\n        \"Invalid Input\",\n        \"Please enter title for new deck\"\n      );\n    } else {\n      const entry = {\n        title,\n        questions: []\n      }\n\n      // Add deck to store\n      dispatch(addDecks({\n        [key]: entry\n      }))\n      this.setState(() => ({\n        title: ''\n      }))\n      this.moveToDecks(title)\n      addDeck({ key, entry })\n    }\n  }\n  // routes the user to the Individual Deck view for the new deck.\n  moveToDecks = (title) => {\n    const { navigation } = this.props\n    navigation.navigate('Deck', { title })\n  }\n\n  render() {\n    const value = this.state.title\n// Render The view includes a form for creating a new deck -\n//  which should just be an input for the title and a 'Create Deck' button.\n    return(\n      <View style={ styles.AddDeckcontainer }>\n        <Text style={ styles.AddDeckheader }>\n          Create Deck\n        </Text>\n        <KeyboardAvoidingView style={ styles.inputContainer } behavior='padding' enabled>\n          <View>\n          <TextInput\n            style={ styles.AddDeckinput }\n            placeholder={ 'Add Deck Title' }\n            value={ value }\n            onChangeText={ this.handleChange }\n           />\n          {/* Pressing the button correctly creates the deck */}\n        <SubmitButton onPress={ this.submit } style={ styles.Deckbutton , {marginTop: 100,} }/>\n        </View>\n        </KeyboardAvoidingView>\n      </View>\n    )\n  }\n}\n\n\nfunction mapStateToProps(decks) {\n  return {\n    decks\n  }\n}\n\nexport default connect(mapStateToProps)(AddDeck)\n"]},"metadata":{},"sourceType":"module"}