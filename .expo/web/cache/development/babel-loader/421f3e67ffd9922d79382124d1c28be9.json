{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport TextButton from \"./TextButton\";\nimport QuizScore from \"./QuizScore\";\nimport { pink, water } from \"../utils/colors\";\nimport styles from \"../utils/styles\";\n\nvar Quiz = function (_Component) {\n  _inherits(Quiz, _Component);\n\n  var _super = _createSuper(Quiz);\n\n  function Quiz() {\n    var _this;\n\n    _classCallCheck(this, Quiz);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      index: 0,\n      counter: 1,\n      viewAnswer: false,\n      correctAnsCount: 0,\n      incorrectAnsCount: 0\n    };\n\n    _this.handleQuestionAnswer = function () {\n      _this.setState(function (previousState) {\n        return {\n          viewAnswer: !previousState.viewAnswer\n        };\n      });\n    };\n\n    _this.handleCorrectAnswer = function () {\n      _this.setState(function (previousState) {\n        return {\n          index: previousState.index + 1,\n          counter: previousState.counter + 1,\n          correctAnsCount: previousState.correctAnsCount + 1,\n          viewAnswer: false\n        };\n      });\n    };\n\n    _this.handleIncorrectAnswer = function () {\n      _this.setState(function (previousState) {\n        return {\n          index: previousState.index + 1,\n          counter: previousState.counter + 1,\n          incorrectAnsCount: previousState.incorrectAnsCount + 1,\n          viewAnswer: false\n        };\n      });\n    };\n\n    _this.handleRestartQuiz = function () {\n      _this.setState(function () {\n        return {\n          index: 0,\n          counter: 1,\n          viewAnswer: false,\n          correctAnsCount: 0,\n          incorrectAnsCount: 0\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Quiz, [{\n    key: \"render\",\n    value: function render() {\n      var deck = this.props.deck;\n      var _this$state = this.state,\n          index = _this$state.index,\n          counter = _this$state.counter,\n          viewAnswer = _this$state.viewAnswer,\n          correctAnsCount = _this$state.correctAnsCount,\n          incorrectAnsCount = _this$state.incorrectAnsCount;\n      var questions = deck.questions;\n      var QuizCount = questions.length;\n\n      if (counter > QuizCount) {\n        return React.createElement(QuizScore, {\n          correctAnsCount: correctAnsCount,\n          incorrectAnsCount: incorrectAnsCount,\n          restartQuiz: this.handleRestartQuiz,\n          backToDeck: this.handleGoBackToDeck\n        });\n      }\n\n      return React.createElement(View, {\n        style: styles.Quizcontainer\n      }, React.createElement(View, {\n        style: styles.QuizprogressContainer\n      }, React.createElement(Text, {\n        style: styles.Quizprogress\n      }, counter, \"/\", QuizCount)), React.createElement(View, {\n        style: styles.quizContainer\n      }, React.createElement(View, {\n        style: {\n          justifyContent: 'center'\n        }\n      }, React.createElement(Text, {\n        style: [styles.question, {\n          fontSize: questions[index].question.length > 50 || questions[index].answer.length > 50 ? 33 : 44\n        }]\n      }, viewAnswer ? questions[index].answer : questions[index].question), React.createElement(TextButton, {\n        style: [styles.QuizanswerBtn, {\n          backgroundColor: water,\n          justifyContent: 'center'\n        }],\n        onPress: this.handleQuestionAnswer\n      }, viewAnswer ? 'View Question' : 'View Answer')), React.createElement(View, {\n        style: styles.QuizbuttonContainer\n      }, React.createElement(TextButton, {\n        style: [styles.QuizoptionBtn, {\n          backgroundColor: water\n        }],\n        onPress: this.handleCorrectAnswer\n      }, \"Correct\"), React.createElement(TextButton, {\n        style: [styles.QuizoptionBtn, {\n          backgroundColor: water\n        }],\n        onPress: this.handleIncorrectAnswer\n      }, \"Incorrect\"))));\n    }\n  }]);\n\n  return Quiz;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(decks, _ref) {\n  var navigation = _ref.navigation;\n  var title = navigation.state.params.title;\n  var deck = decks[title];\n  return {\n    deck: deck\n  };\n};\n\nexport default connect(mapStateToProps)(Quiz);","map":{"version":3,"sources":["C:/Users/User/Desktop/test/Mobile-FlashCard-React-Native-main3/components/Quiz.js"],"names":["React","Component","connect","TextButton","QuizScore","pink","water","styles","Quiz","state","index","counter","viewAnswer","correctAnsCount","incorrectAnsCount","handleQuestionAnswer","setState","previousState","handleCorrectAnswer","handleIncorrectAnswer","handleRestartQuiz","deck","props","questions","QuizCount","length","handleGoBackToDeck","Quizcontainer","QuizprogressContainer","Quizprogress","quizContainer","justifyContent","question","fontSize","answer","QuizanswerBtn","backgroundColor","QuizbuttonContainer","QuizoptionBtn","mapStateToProps","decks","navigation","title","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport TextButton from './TextButton'\nimport QuizScore from './QuizScore'\nimport {pink, water} from '../utils/colors'\nimport styles from '../utils/styles'\n\nclass Quiz extends Component {\n  state = {\n    index: 0,\n    counter: 1,\n    viewAnswer: false,\n    correctAnsCount: 0,\n    incorrectAnsCount: 0\n  }\n  handleQuestionAnswer = () => {\n    this.setState((previousState) => ({\n      viewAnswer: !previousState.viewAnswer\n    }))\n  }\n  handleCorrectAnswer = () => {\n    this.setState((previousState) => ({\n      index: previousState.index + 1,\n      counter: previousState.counter + 1,\n      correctAnsCount: previousState.correctAnsCount + 1,\n      viewAnswer: false\n    }))\n  }\n \n  handleIncorrectAnswer = () => {\n    this.setState((previousState) => ({\n      index: previousState.index + 1,\n      counter: previousState.counter + 1,\n      incorrectAnsCount: previousState.incorrectAnsCount + 1,\n      viewAnswer: false\n    }))\n  }\n  handleRestartQuiz = () => {\n    this.setState(() => ({\n      index: 0,\n      counter: 1,\n      viewAnswer: false,\n      correctAnsCount: 0,\n      incorrectAnsCount: 0\n    }))\n  }\n \n\n  render() {\n    const { deck } = this.props\n    const { index, counter, viewAnswer, correctAnsCount, incorrectAnsCount } = this.state\n    const questions = deck.questions\n    const QuizCount = questions.length\n\n    if (counter > QuizCount) {\n      return (\n        <QuizScore\n          correctAnsCount={ correctAnsCount }\n          incorrectAnsCount={ incorrectAnsCount }\n          restartQuiz={ this.handleRestartQuiz }\n          backToDeck={ this.handleGoBackToDeck }\n        />\n      )\n    }\n\n    return(\n      <View style={ styles.Quizcontainer }>\n        <View style={ styles.QuizprogressContainer }>\n          <Text style={ styles.Quizprogress }>{ counter }/{ QuizCount }</Text>\n        </View>\n        <View style={ styles.quizContainer }>\n          <View style={{ justifyContent: 'center' }}>\n            <Text style={\n                [styles.question, { fontSize: (questions[index].question.length > 50 || \n                questions[index].answer.length > 50) ? 33 : 44 }] }>\n              { viewAnswer\n                ? questions[index].answer\n                : questions[index].question\n              }\n            </Text>\n            <TextButton\n              style={ [styles.QuizanswerBtn,\n              { backgroundColor: water, justifyContent: 'center' }] }\n              onPress={ this.handleQuestionAnswer }>\n                { viewAnswer\n                  ? 'View Question'\n                  : 'View Answer'\n                }\n                \n            </TextButton>\n          \n          </View>\n          <View style={ styles.QuizbuttonContainer }>\n            <TextButton\n              style={ [styles.QuizoptionBtn, { backgroundColor: water }] }\n              onPress={ this.handleCorrectAnswer }>\n                Correct\n            </TextButton>\n            <TextButton\n              style={ [styles.QuizoptionBtn, { backgroundColor: water }] }\n              onPress={ this.handleIncorrectAnswer }>\n                Incorrect\n            </TextButton>\n          </View>\n        </View>\n      </View>\n    )\n  }\n}\n\n\nconst mapStateToProps = (decks, { navigation }) => {\n  const { title } = navigation.state.params\n  const deck = decks[title]\n\n  return {\n    deck\n  }\n}\n\nexport default connect(mapStateToProps)(Quiz)\n"]},"metadata":{},"sourceType":"module"}