{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_DECKS, ADDNEW_DECKSS, ADD_CARD_TO_DECK } from \"../actions\";\n\nfunction decks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_DECKS:\n      return _objectSpread(_objectSpread({}, state), action.decks);\n\n    case ADDNEW_DECKSS:\n      return _objectSpread(_objectSpread({}, state), action.deck);\n\n    case ADD_CARD_TO_DECK:\n      var title = action.title,\n          card = action.card;\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, title, _objectSpread(_objectSpread({}, state[title]), {}, {\n        questions: state[title].questions.concat([card])\n      })));\n\n    default:\n      return state;\n  }\n}\n\nexport default decks;","map":{"version":3,"sources":["C:/Users/User/Desktop/test/Mobile-FlashCard-React-Native-main3/reducers/index.js"],"names":["GET_DECKS","ADDNEW_DECKSS","ADD_CARD_TO_DECK","decks","state","action","type","deck","title","card","questions","concat"],"mappings":";;;;;;AAAA,SAAQA,SAAR,EAAkBC,aAAlB,EAAgCC,gBAAhC;;AAEA,SAASC,KAAT,GAAmC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACjC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKN,SAAL;AACE,6CACKI,KADL,GAEKC,MAAM,CAACF,KAFZ;;AAIF,SAAKF,aAAL;AACE,6CACKG,KADL,GAEKC,MAAM,CAACE,IAFZ;;AAIF,SAAKL,gBAAL;AACE,UAAQM,KAAR,GAAwBH,MAAxB,CAAQG,KAAR;AAAA,UAAeC,IAAf,GAAwBJ,MAAxB,CAAeI,IAAf;AACA,6CACKL,KADL,2BAEGI,KAFH,kCAGOJ,KAAK,CAACI,KAAD,CAHZ;AAIIE,QAAAA,SAAS,EAAEN,KAAK,CAACI,KAAD,CAAL,CAAaE,SAAb,CAAuBC,MAAvB,CAA8B,CAACF,IAAD,CAA9B;AAJf;;AAOF;AACE,aAAOL,KAAP;AArBJ;AAuBD;;AAED,eAAeD,KAAf","sourcesContent":["import {GET_DECKS,ADDNEW_DECKSS,ADD_CARD_TO_DECK} from '../actions'\n\nfunction decks(state = {}, action) {\n  switch(action.type) {\n    case GET_DECKS:\n      return {\n        ...state,\n        ...action.decks\n      }\n    case ADDNEW_DECKSS:\n      return {\n        ...state,\n        ...action.deck\n      }\n    case ADD_CARD_TO_DECK:\n      const { title, card } = action\n      return {\n        ...state,\n        [title]: {\n          ...state[title],\n          questions: state[title].questions.concat([card])\n        }\n      }\n    default:\n      return state\n  }\n}\n\nexport default decks\n"]},"metadata":{},"sourceType":"module"}