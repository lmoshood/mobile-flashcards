{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { connect } from 'react-redux';\nimport { NavigationActions } from 'react-navigation';\nimport { addCardToDeck } from \"../actions\";\nimport TextButton from \"./TextButton\";\nimport { pink } from \"../utils/colors\";\nimport styles from \"../utils/styles\";\nimport { ShowAlert } from \"../utils/api\";\n\nvar AddNewCard = function (_Component) {\n  _inherits(AddNewCard, _Component);\n\n  var _super = _createSuper(AddNewCard);\n\n  function AddNewCard() {\n    var _this;\n\n    _classCallCheck(this, AddNewCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      question: '',\n      answer: ''\n    };\n\n    _this.handleQuestionCard = function (question) {\n      _this.setState(function () {\n        return {\n          question: question\n        };\n      });\n    };\n\n    _this.handleAnswerCard = function (answer) {\n      _this.setState(function () {\n        return {\n          answer: answer\n        };\n      });\n    };\n\n    _this.handleAddCard = function () {\n      var _this$props = _this.props,\n          dispatch = _this$props.dispatch,\n          title = _this$props.title;\n      var _this$state = _this.state,\n          question = _this$state.question,\n          answer = _this$state.answer;\n\n      if (question.length === 0 && answer.length === 0) {\n        ShowAlert(\"Invalid Input\", \"Please Enter a question & answer\");\n      } else {\n        var card = {\n          question: question,\n          answer: answer\n        };\n        dispatch(addCardToDeck(title, card));\n\n        _this.setState(function () {\n          return {\n            question: '',\n            answer: ''\n          };\n        });\n\n        _this.goBack();\n      }\n    };\n\n    _this.goBack = function () {\n      _this.props.navigation.dispatch(NavigationActions.back());\n    };\n\n    return _this;\n  }\n\n  _createClass(AddNewCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          question = _this$state2.question,\n          answer = _this$state2.answer;\n      return React.createElement(View, {\n        style: styles.AddCardcontainer\n      }, React.createElement(KeyboardAvoidingView, {\n        style: styles.AddCardinputContainer,\n        behavior: \"padding\",\n        enabled: true\n      }, React.createElement(View, null, React.createElement(TextInput, {\n        style: styles.AddCardinput,\n        placeholder: 'Question',\n        value: question,\n        onChangeText: this.handleQuestionCard,\n        multiline: true,\n        numberOfLines: 3,\n        maxLength: 100\n      }), React.createElement(TextInput, {\n        style: styles.AddCardinput,\n        placeholder: 'Answer',\n        value: answer,\n        onChangeText: this.handleAnswerCard,\n        multiline: true,\n        numberOfLines: 3,\n        maxLength: 100\n      })), React.createElement(TextButton, {\n        style: [styles.AddCardbutton, {\n          marginTop: 100,\n          backgroundColor: pink\n        }],\n        onPress: this.handleAddCard\n      }, \"Add Card\")));\n    }\n  }]);\n\n  return AddNewCard;\n}(Component);\n\nfunction mapStateToProps(decks, _ref) {\n  var navigation = _ref.navigation;\n  var title = navigation.state.params.title;\n  return {\n    title: title\n  };\n}\n\nexport default connect(mapStateToProps)(AddNewCard);","map":{"version":3,"sources":["C:/Users/User/Desktop/test/Mobile-FlashCard-React-Native-main3/components/AddNewCard.js"],"names":["React","Component","connect","NavigationActions","addCardToDeck","TextButton","pink","styles","ShowAlert","AddNewCard","state","question","answer","handleQuestionCard","setState","handleAnswerCard","handleAddCard","props","dispatch","title","length","card","goBack","navigation","back","AddCardcontainer","AddCardinputContainer","AddCardinput","AddCardbutton","marginTop","backgroundColor","mapStateToProps","decks","params"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport { View, TextInput, KeyboardAvoidingView} from 'react-native'\nimport { connect } from 'react-redux'\nimport { NavigationActions } from 'react-navigation'\nimport { addCardToDeck } from '../actions'\nimport TextButton from './TextButton'\nimport { pink } from '../utils/colors'\nimport styles from '../utils/styles'\nimport {ShowAlert} from '../utils/api'\n\n\nclass AddNewCard extends Component {\n   state = {\n    question: '',\n    answer: ''\n  }\n\n  handleQuestionCard = (question) => {\n    this.setState(() => ({ question }))\n  }\n\n  handleAnswerCard= (answer) => {\n    this.setState(() => ({ answer }))\n  }\n\n  handleAddCard = () => {\n    const { dispatch, title } = this.props\n    const { question, answer } = this.state\n// Alert if user hit add card btn without adding question or answer\n\n    if (question.length === 0 && answer.length === 0) {\n      ShowAlert(\n        \"Invalid Input\",\n        \"Please Enter a question & answer\"\n      );\n      \n    } else {\n      const card = {\n        question,\n        answer\n      }\n\n      // Add card to deck \n      dispatch(addCardToDeck(title, card))\n      this.setState(() => ({\n        question: '',\n        answer: ''\n      }))\n      // goBack - close active screen and move back in the stack\n      this.goBack()\n    }\n  }\n  goBack = () => {\n    this.props.navigation.dispatch(NavigationActions.back())\n  }\n\n  render() {\n    const { question, answer } = this.state\n// render The New Question view includes a form with\n//  fields for a question and answer, and a submit button.\n      return(\n        <View style={ styles.AddCardcontainer }>\n          <KeyboardAvoidingView style={ styles.AddCardinputContainer } behavior='padding' enabled>\n            <View>\n              <TextInput\n                style={ styles.AddCardinput }\n                placeholder={ 'Question' }\n                value={ question }\n                onChangeText={ this.handleQuestionCard }\n                multiline={ true }\n                numberOfLines={ 3 }\n                maxLength={ 100 }\n              />\n              <TextInput\n                style={ styles.AddCardinput }\n                placeholder={ 'Answer' }\n                value={ answer }\n                onChangeText={ this.handleAnswerCard}\n                multiline={ true }\n                numberOfLines={ 3 }\n                maxLength={ 100 }\n              />\n            </View>\n            <TextButton\n              style={ [styles.AddCardbutton, { marginTop: 100,  backgroundColor: pink}] }\n              onPress={ this.handleAddCard }>\n              Add Card\n            </TextButton>\n          </KeyboardAvoidingView>\n        </View>\n    )\n  }\n}\n\nfunction mapStateToProps(decks, { navigation }) {\n  const { title } = navigation.state.params\n\n  return {\n    title\n  }\n}\n\nexport default connect(mapStateToProps)(AddNewCard)\n"]},"metadata":{},"sourceType":"module"}